arm9:
  versions:
    - NA
    - EU
    - JP
  address:
    NA: 0x2000000
    EU: 0x2000000
    JP: 0x2000000
  length:
    NA: 0x400000
    EU: 0x400000
    JP: 0x400000
  description: |-
    Main memory.
    Data in this file aren't located in the ROM itself, and are instead constructs loaded at runtime.
    
    More specifically, this file is a dumping ground for addresses that are useful to know about, but don't fall in the address ranges of any of the other files. Dynamically loaded constructs that do fall within the address range of a relevant binary should be listed in the corresponding YAML file of that binary, since it still has direct utility when reverse-engineering that particular binary.
  functions: []
  data:
    - name: DUNGEON_COLORMAP_PTR
      address:
        NA: 0x21B9CF4
        EU: 0x21BA634
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        Pointer to a colormap used to render colors in a dungeon.
        
        The colormap is a list of 4-byte RGB colors of the form {R, G, B, padding}, which the game indexes into when rendering colors. Some weather conditions modify the colormap, which is how the color scheme changes when it's, e.g., raining.
    - name: DUNGEON_STRUCT
      address:
        NA: 0x21B9D34
        EU: 0x21BA674
      length:
        NA: 0x2CB14
        EU: 0x2CB14
      description: |-
        The dungeon context struct used for tons of stuff in dungeon mode. See struct dungeon in the C headers.
        
        This struct never seems to be referenced directly, and is instead usually accessed via DUNGEON_PTR in overlay 29.
        
        type: struct dungeon
    - name: MOVE_DATA_TABLE
      address:
        NA: 0x22113CC
      length:
        NA: 0x38C6
      description: |-
        The move data table loaded directly from /BALANCE/waza_p.bin. See struct move_data_table in the C headers.
        
        Pointed to by MOVE_DATA_TABLE_PTR in the ARM 9 binary.
        
        type: struct move_data_table
    - name: FRAMES_SINCE_LAUNCH
      address:
        NA:
          - 0x22A354C
          - 0x22A359C
          - 0x22B99C4
      length:
        NA: 0x4
      description: "Starts and 0 when the game is first launched, and continuously ticks up (presumably once per frame) while the game is running."
    - name: BAG_ITEMS
      address:
        NA: 0x22A3824
      length:
        NA: 0x12C
      description: |-
        Array of item structs within the player's bag.
        
        While the game only allows a maximum of 48 items during normal play, it seems to read up to 50 item slots if filled.
        
        type: struct item[50]
    - name: MONEY_CARRIED
      address:
        NA: 0x22A4BB8
      length:
        NA: 0x4
      description: The amount of money the player is currently carrying.
    - name: MONEY_STORED
      address:
        NA: 0x22A4BC4
      length:
        NA: 0x4
      description: The amount of money the player currently has stored in the Duskull Bank.
    - name: LAST_NEW_MOVE
      address:
        NA: 0x22AAE4C
      length:
        NA: 0x8
      description: |-
        Move struct of the last new move introduced when learning a new move. Persists even after the move selection is made in the menu.
        
        type: struct move
    - name: BAG_LEVEL
      address:
        NA: 0x22AB15C
      length:
        NA: 0x1
      description: "The player's bag level, which determines the bag capacity. This indexes directly into the BAG_CAPACITY_TABLE in the ARM9 binary."
    - name: DEBUG_SPECIAL_EPISODE_NUMBER
      address:
        NA: 0x22AB4AC
        EU: 0x22ABDEC
      length:
        NA: 0x1
        EU: 0x1
      description: |-
        The number of the special episode currently being played.
        
        0: normal, Bidoof's Wish
        1: Igglybuff the Prodigy
        2: Today's "Oh My Gosh"
        3: Here Comes Team Charm!
        4: In the Future of Darkness
    - name: PENDING_DUNGEON_ID
      address:
        NA: 0x22AB4FC
      length:
        NA: 0x1
      description: |-
        The ID of the selected dungeon when setting off from the overworld.
        
        Controls the text and map location during the "map cutscene" just before entering a dungeon, as well as the actual dungeon loaded afterwards.
        
        type: enum dungeon_id:8
    - name: PENDING_STARTING_FLOOR
      address:
        NA: 0x22AB4FD
      length:
        NA: 0x1
      description: The floor number to start from in the dungeon specified by PENDING_DUNGEON_ID.
    - name: PLAY_TIME_SECONDS
      address:
        NA: 0x22AB694
      length:
        NA: 0x4
      description: "The player's total play time in seconds."
    - name: PLAY_TIME_FRAME_COUNTER
      address:
        NA: 0x22AB698
      length:
        NA: 0x1
      description: "Counts from 0-59 in a loop, with the play time being incremented by 1 second with each rollover."
    - name: TEAM_NAME
      address:
        NA: 0x22AB918
      length:
        NA: 0xC
      description: |-
        The team name.
        
        A null-terminated string, with a maximum length of 10. Presumably encoded with the ANSI/Shift JIS encoding the game typically uses.
        
        This is presumably part of a larger struct, together with other nearby data.
    - name: HERO_SPECIES_ID
      address:
        NA: 0x22ABDE4
      length:
        NA: 0x2
      description: |-
        The hero's species ID.
        
        This is presumably part of a larger struct, together with other nearby data.
        
        type: enum monster_id:16
    - name: HERO_NICKNAME
      address:
        NA: 0x22ABE1A
      length:
        NA: 0xA
      description: |-
        The hero's nickname.
        
        A null-terminated string, with a maximum length of 10. Presumably encoded with the ANSI/Shift JIS encoding the game typically uses.
        
        This is presumably part of a larger struct, together with other nearby data.
    - name: PARTNER_SPECIES_ID
      address:
        NA: 0x22ABE28
      length:
        NA: 0x2
      description: |-
        The partner's species ID.
        
        This is presumably part of a larger struct, together with other nearby data.
        
        type: enum monster_id:16
    - name: LEADER_IQ_SKILLS
      address:
        NA: 0x22B5198
      length:
        NA: 0xC
      description: |-
        Unlocked IQ skills of the current leader, available for selection from the IQ skills menu.
        
        One bit per skill (1 if unlocked). Same format as the IQ skills bitvector on the monster info struct.
        
        This is presumably part of a larger struct, together with other nearby data.
    - name: LEADER_NICKNAME
      address:
        NA: 0x22B51AA
      length:
        NA: 0xA
      description: |-
        The current leader's nickname.
        
        A null-terminated string, with a maximum length of 10. Presumably encoded with the ANSI/Shift JIS encoding the game typically uses.
        
        This is presumably part of a larger struct, together with other nearby data.
    - name: PARTY_MEMBER_2_IQ_SKILLS
      address:
        NA: 0x22B5200
      length:
        NA: 0xC
      description: |-
        Unlocked IQ skills of the second party member, available for selection from the IQ skills menu.
        
        One bit per skill (1 if unlocked). Same format as the IQ skills bitvector on the monster info struct.
        
        This is presumably part of a larger struct, together with other nearby data.
    - name: TURNING_ON_THE_SPOT_FLAG
      address:
        NA: 0x237C9A6
      length:
        NA: 0x1
      description: "[Runtime] Flag for whether the player is turning on the spot (pressing Y)."
    - name: FLOOR_GENERATION_STATUS
      address:
        NA: 0x237CFBC
      length:
        NA: 0x40
      description: |-
        [Runtime] Status data related to generation of the current floor in a dungeon.
        
        This data is populated as the dungeon floor is generated.
        
        type: struct floor_generation_status
